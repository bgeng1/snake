var x=Object.defineProperty;var g=(h,t,i)=>t in h?x(h,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):h[t]=i;var s=(h,t,i)=>(g(h,typeof t!="symbol"?t+"":t,i),i);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))d(e);new MutationObserver(e=>{for(const r of e)if(r.type==="childList")for(const a of r.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&d(a)}).observe(document,{childList:!0,subtree:!0});function i(e){const r={};return e.integrity&&(r.integrity=e.integrity),e.referrerPolicy&&(r.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?r.credentials="include":e.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function d(e){if(e.ep)return;e.ep=!0;const r=i(e);fetch(e.href,r)}})();class f{constructor(t,i){s(this,"direction","right");s(this,"ctx");s(this,"headNode",{x:500,y:500});s(this,"body",[this.headNode]);s(this,"width",25);s(this,"speed",this.width);s(this,"canvasHeight");s(this,"canvasWidth");s(this,"fruitX",400);s(this,"fruitY",400);s(this,"interval");s(this,"score",0);const d=t.getContext("2d");if(!d)throw Error("snake class error: cant get canvas context");this.canvasHeight=t.height,this.canvasWidth=t.width,this.ctx=d,this.interval=i}draw(){for(const t of this.body)this.ctx.fillStyle="rgb(0, 150, 0)",this.ctx.fillRect(t.x,t.y,this.width,this.width);this.ctx.fillStyle="rgb(255, 210, 0)",this.ctx.fillRect(this.fruitX,this.fruitY,this.width,this.width)}update(){let t=this.body[0];switch(this.direction){case"up":t.y-=this.speed;break;case"down":t.y+=this.speed;break;case"left":t.x-=this.speed;break;case"right":t.x+=this.speed;break}var i=this.body.pop();i.x=t.x,i.y=t.y,this.body.unshift(i)}detectCollisions(){const t=this.body[0];(t.x>=this.canvasWidth||t.y>=this.canvasHeight||t.x<=-1||t.y<=-1)&&this.gameOver();for(let i=2;i<this.body.length;i++)this.detectEntityCollisions({x:t.x,y:t.y,w:this.width,h:this.width},{x:this.body[i].x,y:this.body[i].y,w:this.width,h:this.width})&&this.gameOver();this.detectEntityCollisions({x:t.x,y:t.y,w:this.width,h:this.width},{x:this.fruitX,y:this.fruitY,w:this.width,h:this.width})&&(this.generateFruit(),this.body.push({x:t.x,y:t.y}),this.score+=10)}gameOver(){clearInterval(this.interval),this.ctx.fillStyle="red",this.ctx.font="48px georgia",this.ctx.fillText(`Game Over. Score: ${this.score}`,250,150),this.ctx.font="35px georgia",this.ctx.fillText("space bar to restart",320,350)}setDirection(t){t==="down"&&this.direction!=="up"&&(this.direction="down"),t==="up"&&this.direction!=="down"&&(this.direction="up"),t==="right"&&this.direction!=="left"&&(this.direction="right"),t==="left"&&this.direction!=="right"&&(this.direction="left")}generateFruit(){const t=this.canvasHeight/this.width,i=this.canvasWidth/this.width;this.fruitX=Math.floor(Math.random()*(i-1))*this.width,this.fruitY=Math.floor(Math.random()*(t-1))*this.width}detectEntityCollisions(t,i){return t.x<i.x+i.w&&t.x+t.w>i.x&&t.y<i.y+i.h&&t.h+t.y>i.y}}const u=1e3,y=1e3;let c;const n=document.querySelector("canvas");if(!n)throw Error("cant find html canvas element");window.addEventListener("keydown",h=>{const{key:t}=h;t==="ArrowUp"&&o.setDirection("up"),t==="ArrowDown"&&o.setDirection("down"),t==="ArrowLeft"&&o.setDirection("left"),t==="ArrowRight"&&o.setDirection("right"),t===" "&&(clearInterval(c),c=setInterval(()=>{w()},100),o=new f(n,c))});const l=n.getContext("2d");n.width=y;n.height=u;c=setInterval(()=>{w()},100);let o=new f(n,c);const w=()=>{l&&(l.clearRect(0,0,y,u),o.update(),o.draw(),o.detectCollisions())};
